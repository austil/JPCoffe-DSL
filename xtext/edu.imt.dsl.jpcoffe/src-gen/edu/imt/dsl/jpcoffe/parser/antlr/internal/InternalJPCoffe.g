/*
 * generated by Xtext 2.15.0
 */
grammar InternalJPCoffe;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.imt.dsl.jpcoffe.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.imt.dsl.jpcoffe.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.imt.dsl.jpcoffe.services.JPCoffeGrammarAccess;

}

@parser::members {

 	private JPCoffeGrammarAccess grammarAccess;

    public InternalJPCoffeParser(TokenStream input, JPCoffeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Main";
   	}

   	@Override
   	protected JPCoffeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMainAccess().getRecipesRecipeParserRuleCall_0());
			}
			lv_recipes_0_0=ruleRecipe
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMainRule());
				}
				add(
					$current,
					"recipes",
					lv_recipes_0_0,
					"edu.imt.dsl.jpcoffe.JPCoffe.Recipe");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleRecipe
entryRuleRecipe returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecipeRule()); }
	iv_ruleRecipe=ruleRecipe
	{ $current=$iv_ruleRecipe.current; }
	EOF;

// Rule Recipe
ruleRecipe returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Recipe'
		{
			newLeafNode(otherlv_0, grammarAccess.getRecipeAccess().getRecipeKeyword_0());
		}
		this_STRING_1=RULE_STRING
		{
			newLeafNode(this_STRING_1, grammarAccess.getRecipeAccess().getSTRINGTerminalRuleCall_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getRecipeAccess().getPortionNBParserRuleCall_3());
		}
		this_PortionNB_3=rulePortionNB
		{
			$current = $this_PortionNB_3.current;
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getRecipeAccess().getIngredientsBlockParserRuleCall_4());
		}
		ruleIngredientsBlock
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getRecipeAccess().getToolsBlockParserRuleCall_5());
		}
		ruleToolsBlock
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getRecipeAccess().getStepsBlockParserRuleCall_6());
		}
		ruleStepsBlock
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRulePortionNB
entryRulePortionNB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortionNBRule()); }
	iv_rulePortionNB=rulePortionNB
	{ $current=$iv_rulePortionNB.current; }
	EOF;

// Rule PortionNB
rulePortionNB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='For'
		{
			newLeafNode(otherlv_0, grammarAccess.getPortionNBAccess().getForKeyword_0());
		}
		(
			(
				lv_nb_1_0=RULE_INT
				{
					newLeafNode(lv_nb_1_0, grammarAccess.getPortionNBAccess().getNbINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortionNBRule());
					}
					setWithLastConsumed(
						$current,
						"nb",
						lv_nb_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2='people'
			{
				newLeafNode(otherlv_2, grammarAccess.getPortionNBAccess().getPeopleKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleIngredientsBlock
entryRuleIngredientsBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIngredientsBlockRule()); }
	iv_ruleIngredientsBlock=ruleIngredientsBlock
	{ $current=$iv_ruleIngredientsBlock.current.getText(); }
	EOF;

// Rule IngredientsBlock
ruleIngredientsBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Ingredients'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIngredientsBlockAccess().getIngredientsKeyword_0());
		}
		this_NEW_LINE_1=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_1);
		}
		{
			newLeafNode(this_NEW_LINE_1, grammarAccess.getIngredientsBlockAccess().getNEW_LINETerminalRuleCall_1());
		}
		this_TITLE_LINE_2=RULE_TITLE_LINE
		{
			$current.merge(this_TITLE_LINE_2);
		}
		{
			newLeafNode(this_TITLE_LINE_2, grammarAccess.getIngredientsBlockAccess().getTITLE_LINETerminalRuleCall_2());
		}
		this_NEW_LINE_3=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_3);
		}
		{
			newLeafNode(this_NEW_LINE_3, grammarAccess.getIngredientsBlockAccess().getNEW_LINETerminalRuleCall_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getIngredientsBlockAccess().getIngredientParserRuleCall_4());
			}
			this_Ingredient_4=ruleIngredient
			{
				$current.merge(this_Ingredient_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		this_NEW_LINE_5=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_5);
		}
		{
			newLeafNode(this_NEW_LINE_5, grammarAccess.getIngredientsBlockAccess().getNEW_LINETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleIngredient
entryRuleIngredient returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIngredientRule()); }
	iv_ruleIngredient=ruleIngredient
	{ $current=$iv_ruleIngredient.current.getText(); }
	EOF;

// Rule Ingredient
ruleIngredient returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIngredientAccess().getAsteriskKeyword_0());
		}
		this_SPACE_1=RULE_SPACE
		{
			$current.merge(this_SPACE_1);
		}
		{
			newLeafNode(this_SPACE_1, grammarAccess.getIngredientAccess().getSPACETerminalRuleCall_1());
		}
		this_NAME_2=RULE_NAME
		{
			$current.merge(this_NAME_2);
		}
		{
			newLeafNode(this_NAME_2, grammarAccess.getIngredientAccess().getNAMETerminalRuleCall_2());
		}
		{
			newCompositeNode(grammarAccess.getIngredientAccess().getQuantityParserRuleCall_3());
		}
		this_Quantity_3=ruleQuantity
		{
			$current.merge(this_Quantity_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_NEW_LINE_4=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_4);
		}
		{
			newLeafNode(this_NEW_LINE_4, grammarAccess.getIngredientAccess().getNEW_LINETerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleQuantity
entryRuleQuantity returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	iv_ruleQuantity=ruleQuantity
	{ $current=$iv_ruleQuantity.current.getText(); }
	EOF;

// Rule Quantity
ruleQuantity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getQuantityAccess().getINTTerminalRuleCall_0());
		}
		(
			this_METRIC_UNIT_1=RULE_METRIC_UNIT
			{
				$current.merge(this_METRIC_UNIT_1);
			}
			{
				newLeafNode(this_METRIC_UNIT_1, grammarAccess.getQuantityAccess().getMETRIC_UNITTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleToolsBlock
entryRuleToolsBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getToolsBlockRule()); }
	iv_ruleToolsBlock=ruleToolsBlock
	{ $current=$iv_ruleToolsBlock.current.getText(); }
	EOF;

// Rule ToolsBlock
ruleToolsBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Tools'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getToolsBlockAccess().getToolsKeyword_0());
		}
		this_NEW_LINE_1=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_1);
		}
		{
			newLeafNode(this_NEW_LINE_1, grammarAccess.getToolsBlockAccess().getNEW_LINETerminalRuleCall_1());
		}
		this_TITLE_LINE_2=RULE_TITLE_LINE
		{
			$current.merge(this_TITLE_LINE_2);
		}
		{
			newLeafNode(this_TITLE_LINE_2, grammarAccess.getToolsBlockAccess().getTITLE_LINETerminalRuleCall_2());
		}
		this_NEW_LINE_3=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_3);
		}
		{
			newLeafNode(this_NEW_LINE_3, grammarAccess.getToolsBlockAccess().getNEW_LINETerminalRuleCall_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getToolsBlockAccess().getToolParserRuleCall_4());
			}
			this_Tool_4=ruleTool
			{
				$current.merge(this_Tool_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		this_NEW_LINE_5=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_5);
		}
		{
			newLeafNode(this_NEW_LINE_5, grammarAccess.getToolsBlockAccess().getNEW_LINETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleTool
entryRuleTool returns [String current=null]:
	{ newCompositeNode(grammarAccess.getToolRule()); }
	iv_ruleTool=ruleTool
	{ $current=$iv_ruleTool.current.getText(); }
	EOF;

// Rule Tool
ruleTool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getToolAccess().getAsteriskKeyword_0());
		}
		this_SPACE_1=RULE_SPACE
		{
			$current.merge(this_SPACE_1);
		}
		{
			newLeafNode(this_SPACE_1, grammarAccess.getToolAccess().getSPACETerminalRuleCall_1());
		}
		this_NAME_2=RULE_NAME
		{
			$current.merge(this_NAME_2);
		}
		{
			newLeafNode(this_NAME_2, grammarAccess.getToolAccess().getNAMETerminalRuleCall_2());
		}
		this_NEW_LINE_3=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_3);
		}
		{
			newLeafNode(this_NEW_LINE_3, grammarAccess.getToolAccess().getNEW_LINETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleStepsBlock
entryRuleStepsBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStepsBlockRule()); }
	iv_ruleStepsBlock=ruleStepsBlock
	{ $current=$iv_ruleStepsBlock.current.getText(); }
	EOF;

// Rule StepsBlock
ruleStepsBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Steps'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStepsBlockAccess().getStepsKeyword_0());
		}
		this_NEW_LINE_1=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_1);
		}
		{
			newLeafNode(this_NEW_LINE_1, grammarAccess.getStepsBlockAccess().getNEW_LINETerminalRuleCall_1());
		}
		this_TITLE_LINE_2=RULE_TITLE_LINE
		{
			$current.merge(this_TITLE_LINE_2);
		}
		{
			newLeafNode(this_TITLE_LINE_2, grammarAccess.getStepsBlockAccess().getTITLE_LINETerminalRuleCall_2());
		}
		this_NEW_LINE_3=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_3);
		}
		{
			newLeafNode(this_NEW_LINE_3, grammarAccess.getStepsBlockAccess().getNEW_LINETerminalRuleCall_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getStepsBlockAccess().getStepParserRuleCall_4());
			}
			this_Step_4=ruleStep
			{
				$current.merge(this_Step_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		this_NEW_LINE_5=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_5);
		}
		{
			newLeafNode(this_NEW_LINE_5, grammarAccess.getStepsBlockAccess().getNEW_LINETerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current.getText(); }
	EOF;

// Rule Step
ruleStep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getStepAccess().getINTTerminalRuleCall_1());
			}
		)?
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStepAccess().getCommaKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getStepAccess().getINTTerminalRuleCall_2_1());
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStepAccess().getRightCurlyBracketKeyword_3());
		}
		this_SPACE_5=RULE_SPACE
		{
			$current.merge(this_SPACE_5);
		}
		{
			newLeafNode(this_SPACE_5, grammarAccess.getStepAccess().getSPACETerminalRuleCall_4());
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStepAccess().getHyphenMinusGreaterThanSignKeyword_5());
		}
		this_SPACE_7=RULE_SPACE
		{
			$current.merge(this_SPACE_7);
		}
		{
			newLeafNode(this_SPACE_7, grammarAccess.getStepAccess().getSPACETerminalRuleCall_6());
		}
		this_INT_8=RULE_INT
		{
			$current.merge(this_INT_8);
		}
		{
			newLeafNode(this_INT_8, grammarAccess.getStepAccess().getINTTerminalRuleCall_7());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStepAccess().getFullStopKeyword_8());
		}
		this_SPACE_10=RULE_SPACE
		{
			$current.merge(this_SPACE_10);
		}
		{
			newLeafNode(this_SPACE_10, grammarAccess.getStepAccess().getSPACETerminalRuleCall_9());
		}
		this_TEXT_11=RULE_TEXT
		{
			$current.merge(this_TEXT_11);
		}
		{
			newLeafNode(this_TEXT_11, grammarAccess.getStepAccess().getTEXTTerminalRuleCall_10());
		}
		this_NEW_LINE_12=RULE_NEW_LINE
		{
			$current.merge(this_NEW_LINE_12);
		}
		{
			newLeafNode(this_NEW_LINE_12, grammarAccess.getStepAccess().getNEW_LINETerminalRuleCall_11());
		}
	)
;

RULE_METRIC_UNIT : ('gr'|'kg'|'cl'|'l');

RULE_TITLE_LINE : '-'+;

RULE_NAME : 'A'..'Z' ('a'..'z'|'A'..'Z'|RULE_SPACE)*;

RULE_NEW_LINE : ('\n'|'\r\n');

RULE_SPACE : ' ';

RULE_TEXT : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
