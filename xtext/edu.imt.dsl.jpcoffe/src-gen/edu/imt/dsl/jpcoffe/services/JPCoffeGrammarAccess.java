/*
 * generated by Xtext 2.15.0
 */
package edu.imt.dsl.jpcoffe.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JPCoffeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cRecipesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecipesRecipeParserRuleCall_1_0 = (RuleCall)cRecipesAssignment_1.eContents().get(0);
		
		//Main:
		//	imports+=Import*
		//	recipes+=Recipe+;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* recipes+=Recipe+
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//recipes+=Recipe+
		public Assignment getRecipesAssignment_1() { return cRecipesAssignment_1; }
		
		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_1_0() { return cRecipesRecipeParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRecipeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNAMEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Import:
		//	"use" "recipe" NAME "in" STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"use" "recipe" NAME "in" STRING
		public Group getGroup() { return cGroup; }
		
		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//"recipe"
		public Keyword getRecipeKeyword_1() { return cRecipeKeyword_1; }
		
		//NAME
		public RuleCall getNAMEParserRuleCall_2() { return cNAMEParserRuleCall_2; }
		
		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecipeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortionPortionNBParserRuleCall_3_0 = (RuleCall)cPortionAssignment_3.eContents().get(0);
		private final Assignment cIngredientsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIngredientsIngredientsBlockParserRuleCall_4_0 = (RuleCall)cIngredientsAssignment_4.eContents().get(0);
		private final Assignment cToolsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToolsToolsBlockParserRuleCall_5_0 = (RuleCall)cToolsAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepsBlockParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Recipe:
		//	"Recipe" name=STRING '{'
		//	portion=PortionNB
		//	ingredients=IngredientsBlock
		//	tools=ToolsBlock
		//	steps=StepsBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"Recipe" name=STRING '{' portion=PortionNB ingredients=IngredientsBlock tools=ToolsBlock steps=StepsBlock '}'
		public Group getGroup() { return cGroup; }
		
		//"Recipe"
		public Keyword getRecipeKeyword_0() { return cRecipeKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//portion=PortionNB
		public Assignment getPortionAssignment_3() { return cPortionAssignment_3; }
		
		//PortionNB
		public RuleCall getPortionPortionNBParserRuleCall_3_0() { return cPortionPortionNBParserRuleCall_3_0; }
		
		//ingredients=IngredientsBlock
		public Assignment getIngredientsAssignment_4() { return cIngredientsAssignment_4; }
		
		//IngredientsBlock
		public RuleCall getIngredientsIngredientsBlockParserRuleCall_4_0() { return cIngredientsIngredientsBlockParserRuleCall_4_0; }
		
		//tools=ToolsBlock
		public Assignment getToolsAssignment_5() { return cToolsAssignment_5; }
		
		//ToolsBlock
		public RuleCall getToolsToolsBlockParserRuleCall_5_0() { return cToolsToolsBlockParserRuleCall_5_0; }
		
		//steps=StepsBlock
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//StepsBlock
		public RuleCall getStepsStepsBlockParserRuleCall_6_0() { return cStepsStepsBlockParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PortionNBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.PortionNB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbINTTerminalRuleCall_1_0 = (RuleCall)cNbAssignment_1.eContents().get(0);
		private final Keyword cPeopleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PortionNB:
		//	"For" nb=INT "people"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"For" nb=INT "people"?
		public Group getGroup() { return cGroup; }
		
		//"For"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//nb=INT
		public Assignment getNbAssignment_1() { return cNbAssignment_1; }
		
		//INT
		public RuleCall getNbINTTerminalRuleCall_1_0() { return cNbINTTerminalRuleCall_1_0; }
		
		//"people"?
		public Keyword getPeopleKeyword_2() { return cPeopleKeyword_2; }
	}
	public class IngredientsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.IngredientsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIngredientsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIngredientsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIngredientsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cIngredientsListAlternatives_3_0 = (Alternatives)cIngredientsListAssignment_3.eContents().get(0);
		private final RuleCall cIngredientsListIngredientsGroupParserRuleCall_3_0_0 = (RuleCall)cIngredientsListAlternatives_3_0.eContents().get(0);
		private final RuleCall cIngredientsListIngredientParserRuleCall_3_0_1 = (RuleCall)cIngredientsListAlternatives_3_0.eContents().get(1);
		
		//IngredientsBlock:
		//	{IngredientsBlock} "Ingredients"
		//	TITLE_LINE
		//	ingredientsList+=(IngredientsGroup | Ingredient)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IngredientsBlock} "Ingredients" TITLE_LINE ingredientsList+=(IngredientsGroup | Ingredient)*
		public Group getGroup() { return cGroup; }
		
		//{IngredientsBlock}
		public Action getIngredientsBlockAction_0() { return cIngredientsBlockAction_0; }
		
		//"Ingredients"
		public Keyword getIngredientsKeyword_1() { return cIngredientsKeyword_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//ingredientsList+=(IngredientsGroup | Ingredient)*
		public Assignment getIngredientsListAssignment_3() { return cIngredientsListAssignment_3; }
		
		//(IngredientsGroup | Ingredient)
		public Alternatives getIngredientsListAlternatives_3_0() { return cIngredientsListAlternatives_3_0; }
		
		//IngredientsGroup
		public RuleCall getIngredientsListIngredientsGroupParserRuleCall_3_0_0() { return cIngredientsListIngredientsGroupParserRuleCall_3_0_0; }
		
		//Ingredient
		public RuleCall getIngredientsListIngredientParserRuleCall_3_0_1() { return cIngredientsListIngredientParserRuleCall_3_0_1; }
	}
	public class IngredientsGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.IngredientsGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGROUPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIngredientsListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIngredientsListIngredientParserRuleCall_4_0 = (RuleCall)cIngredientsListAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQuantityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuantityQuantityParserRuleCall_6_0 = (RuleCall)cQuantityAssignment_6.eContents().get(0);
		
		//IngredientsGroup:
		//	'*' "GROUP" name=STRING '['
		//	ingredientsList+=Ingredient*
		//	']'
		//	quantity=Quantity?;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' "GROUP" name=STRING '[' ingredientsList+=Ingredient* ']' quantity=Quantity?
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"GROUP"
		public Keyword getGROUPKeyword_1() { return cGROUPKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//ingredientsList+=Ingredient*
		public Assignment getIngredientsListAssignment_4() { return cIngredientsListAssignment_4; }
		
		//Ingredient
		public RuleCall getIngredientsListIngredientParserRuleCall_4_0() { return cIngredientsListIngredientParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//quantity=Quantity?
		public Assignment getQuantityAssignment_6() { return cQuantityAssignment_6; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_6_0() { return cQuantityQuantityParserRuleCall_6_0; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Ingredient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOriginalNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOriginalNameNAMEParserRuleCall_1_0_0 = (RuleCall)cOriginalNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOriginalNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOriginalNameNAMEParserRuleCall_1_1_1_0 = (RuleCall)cOriginalNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cASKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cQuantityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuantityQuantityParserRuleCall_3_0 = (RuleCall)cQuantityAssignment_3.eContents().get(0);
		
		//Ingredient:
		//	'*' (originalName+=NAME ("OR" originalName+=NAME)* "AS")?
		//	name=NAME
		//	quantity=Quantity?;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' (originalName+=NAME ("OR" originalName+=NAME)* "AS")? name=NAME quantity=Quantity?
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//(originalName+=NAME ("OR" originalName+=NAME)* "AS")?
		public Group getGroup_1() { return cGroup_1; }
		
		//originalName+=NAME
		public Assignment getOriginalNameAssignment_1_0() { return cOriginalNameAssignment_1_0; }
		
		//NAME
		public RuleCall getOriginalNameNAMEParserRuleCall_1_0_0() { return cOriginalNameNAMEParserRuleCall_1_0_0; }
		
		//("OR" originalName+=NAME)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"OR"
		public Keyword getORKeyword_1_1_0() { return cORKeyword_1_1_0; }
		
		//originalName+=NAME
		public Assignment getOriginalNameAssignment_1_1_1() { return cOriginalNameAssignment_1_1_1; }
		
		//NAME
		public RuleCall getOriginalNameNAMEParserRuleCall_1_1_1_0() { return cOriginalNameNAMEParserRuleCall_1_1_1_0; }
		
		//"AS"
		public Keyword getASKeyword_1_2() { return cASKeyword_1_2; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMEParserRuleCall_2_0() { return cNameNAMEParserRuleCall_2_0; }
		
		//quantity=Quantity?
		public Assignment getQuantityAssignment_3() { return cQuantityAssignment_3; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_3_0() { return cQuantityQuantityParserRuleCall_3_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAmountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAmountINTTerminalRuleCall_0_0 = (RuleCall)cAmountAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitMETRIC_UNITTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Quantity:
		//	amount=INT unit=METRIC_UNIT?;
		@Override public ParserRule getRule() { return rule; }
		
		//amount=INT unit=METRIC_UNIT?
		public Group getGroup() { return cGroup; }
		
		//amount=INT
		public Assignment getAmountAssignment_0() { return cAmountAssignment_0; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_0_0() { return cAmountINTTerminalRuleCall_0_0; }
		
		//unit=METRIC_UNIT?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//METRIC_UNIT
		public RuleCall getUnitMETRIC_UNITTerminalRuleCall_1_0() { return cUnitMETRIC_UNITTerminalRuleCall_1_0; }
	}
	public class ToolsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.ToolsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cToolsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToolsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cToolsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToolsListToolParserRuleCall_3_0 = (RuleCall)cToolsListAssignment_3.eContents().get(0);
		
		//ToolsBlock:
		//	{ToolsBlock} "Tools"
		//	TITLE_LINE
		//	toolsList+=Tool*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ToolsBlock} "Tools" TITLE_LINE toolsList+=Tool*
		public Group getGroup() { return cGroup; }
		
		//{ToolsBlock}
		public Action getToolsBlockAction_0() { return cToolsBlockAction_0; }
		
		//"Tools"
		public Keyword getToolsKeyword_1() { return cToolsKeyword_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//toolsList+=Tool*
		public Assignment getToolsListAssignment_3() { return cToolsListAssignment_3; }
		
		//Tool
		public RuleCall getToolsListToolParserRuleCall_3_0() { return cToolsListToolParserRuleCall_3_0; }
	}
	public class ToolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Tool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOriginalNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOriginalNameNAMEParserRuleCall_1_0_0 = (RuleCall)cOriginalNameAssignment_1_0.eContents().get(0);
		private final Keyword cASKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Tool:
		//	'*' (originalName=NAME "AS")? name=NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' (originalName=NAME "AS")? name=NAME
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//(originalName=NAME "AS")?
		public Group getGroup_1() { return cGroup_1; }
		
		//originalName=NAME
		public Assignment getOriginalNameAssignment_1_0() { return cOriginalNameAssignment_1_0; }
		
		//NAME
		public RuleCall getOriginalNameNAMEParserRuleCall_1_0_0() { return cOriginalNameNAMEParserRuleCall_1_0_0; }
		
		//"AS"
		public Keyword getASKeyword_1_1() { return cASKeyword_1_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMEParserRuleCall_2_0() { return cNameNAMEParserRuleCall_2_0; }
	}
	public class StepsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.StepsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepsBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStepsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStepsListAlternatives_3_0 = (Alternatives)cStepsListAssignment_3.eContents().get(0);
		private final RuleCall cStepsListConditionalStepParserRuleCall_3_0_0 = (RuleCall)cStepsListAlternatives_3_0.eContents().get(0);
		private final RuleCall cStepsListStepParserRuleCall_3_0_1 = (RuleCall)cStepsListAlternatives_3_0.eContents().get(1);
		
		//StepsBlock:
		//	{StepsBlock} "Steps"
		//	TITLE_LINE
		//	stepsList+=(ConditionalStep | Step)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StepsBlock} "Steps" TITLE_LINE stepsList+=(ConditionalStep | Step)*
		public Group getGroup() { return cGroup; }
		
		//{StepsBlock}
		public Action getStepsBlockAction_0() { return cStepsBlockAction_0; }
		
		//"Steps"
		public Keyword getStepsKeyword_1() { return cStepsKeyword_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//stepsList+=(ConditionalStep | Step)*
		public Assignment getStepsListAssignment_3() { return cStepsListAssignment_3; }
		
		//(ConditionalStep | Step)
		public Alternatives getStepsListAlternatives_3_0() { return cStepsListAlternatives_3_0; }
		
		//ConditionalStep
		public RuleCall getStepsListConditionalStepParserRuleCall_3_0_0() { return cStepsListConditionalStepParserRuleCall_3_0_0; }
		
		//Step
		public RuleCall getStepsListStepParserRuleCall_3_0_1() { return cStepsListStepParserRuleCall_3_0_1; }
	}
	public class ConditionalStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.ConditionalStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredINTTerminalRuleCall_1_0 = (RuleCall)cPredAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredINTTerminalRuleCall_2_1_0 = (RuleCall)cPredAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNumAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNumINTTerminalRuleCall_5_0 = (RuleCall)cNumAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIFKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cConditionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConditionTEXTParserRuleCall_8_0 = (RuleCall)cConditionAssignment_8.eContents().get(0);
		private final Keyword cTHENKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cToAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cToINTTerminalRuleCall_10_0 = (RuleCall)cToAssignment_10.eContents().get(0);
		
		//ConditionalStep:
		//	"{" pred+=INT? ("," pred+=INT)* "}"
		//	"->" num=INT "."
		//	"IF" condition=TEXT
		//	"THEN" to=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"{" pred+=INT? ("," pred+=INT)* "}" "->" num=INT "." "IF" condition=TEXT "THEN" to=INT
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//pred+=INT?
		public Assignment getPredAssignment_1() { return cPredAssignment_1; }
		
		//INT
		public RuleCall getPredINTTerminalRuleCall_1_0() { return cPredINTTerminalRuleCall_1_0; }
		
		//("," pred+=INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//pred+=INT
		public Assignment getPredAssignment_2_1() { return cPredAssignment_2_1; }
		
		//INT
		public RuleCall getPredINTTerminalRuleCall_2_1_0() { return cPredINTTerminalRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//num=INT
		public Assignment getNumAssignment_5() { return cNumAssignment_5; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_5_0() { return cNumINTTerminalRuleCall_5_0; }
		
		//"."
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//"IF"
		public Keyword getIFKeyword_7() { return cIFKeyword_7; }
		
		//condition=TEXT
		public Assignment getConditionAssignment_8() { return cConditionAssignment_8; }
		
		//TEXT
		public RuleCall getConditionTEXTParserRuleCall_8_0() { return cConditionTEXTParserRuleCall_8_0; }
		
		//"THEN"
		public Keyword getTHENKeyword_9() { return cTHENKeyword_9; }
		
		//to=INT
		public Assignment getToAssignment_10() { return cToAssignment_10; }
		
		//INT
		public RuleCall getToINTTerminalRuleCall_10_0() { return cToINTTerminalRuleCall_10_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredINTTerminalRuleCall_1_0 = (RuleCall)cPredAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredINTTerminalRuleCall_2_1_0 = (RuleCall)cPredAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNumAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNumINTTerminalRuleCall_5_0 = (RuleCall)cNumAssignment_5.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTextTEXTParserRuleCall_7_0 = (RuleCall)cTextAssignment_7.eContents().get(0);
		
		//Step:
		//	"{" pred+=INT? ("," pred+=INT)* "}"
		//	"->" num=INT "."
		//	text=TEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//"{" pred+=INT? ("," pred+=INT)* "}" "->" num=INT "." text=TEXT
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//pred+=INT?
		public Assignment getPredAssignment_1() { return cPredAssignment_1; }
		
		//INT
		public RuleCall getPredINTTerminalRuleCall_1_0() { return cPredINTTerminalRuleCall_1_0; }
		
		//("," pred+=INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//pred+=INT
		public Assignment getPredAssignment_2_1() { return cPredAssignment_2_1; }
		
		//INT
		public RuleCall getPredINTTerminalRuleCall_2_1_0() { return cPredINTTerminalRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//num=INT
		public Assignment getNumAssignment_5() { return cNumAssignment_5; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_5_0() { return cNumINTTerminalRuleCall_5_0; }
		
		//"."
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//text=TEXT
		public Assignment getTextAssignment_7() { return cTextAssignment_7; }
		
		//TEXT
		public RuleCall getTextTEXTParserRuleCall_7_0() { return cTextTEXTParserRuleCall_7_0; }
	}
	public class NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAJ_WORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NAME:
		//	MAJ_WORD WORD*;
		@Override public ParserRule getRule() { return rule; }
		
		//MAJ_WORD WORD*
		public Group getGroup() { return cGroup; }
		
		//MAJ_WORD
		public RuleCall getMAJ_WORDTerminalRuleCall_0() { return cMAJ_WORDTerminalRuleCall_0; }
		
		//WORD*
		public RuleCall getWORDTerminalRuleCall_1() { return cWORDTerminalRuleCall_1; }
	}
	public class TEXTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.TEXT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMAJ_WORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TEXT:
		//	(MAJ_WORD | WORD | INT)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(MAJ_WORD | WORD | INT)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MAJ_WORD
		public RuleCall getMAJ_WORDTerminalRuleCall_0() { return cMAJ_WORDTerminalRuleCall_0; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_1() { return cWORDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final MainElements pMain;
	private final ImportElements pImport;
	private final RecipeElements pRecipe;
	private final PortionNBElements pPortionNB;
	private final IngredientsBlockElements pIngredientsBlock;
	private final IngredientsGroupElements pIngredientsGroup;
	private final IngredientElements pIngredient;
	private final QuantityElements pQuantity;
	private final TerminalRule tMETRIC_UNIT;
	private final ToolsBlockElements pToolsBlock;
	private final ToolElements pTool;
	private final StepsBlockElements pStepsBlock;
	private final ConditionalStepElements pConditionalStep;
	private final StepElements pStep;
	private final NAMEElements pNAME;
	private final TEXTElements pTEXT;
	private final TerminalRule tTITLE_LINE;
	private final TerminalRule tMAJ_WORD;
	private final TerminalRule tWORD;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public JPCoffeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMain = new MainElements();
		this.pImport = new ImportElements();
		this.pRecipe = new RecipeElements();
		this.pPortionNB = new PortionNBElements();
		this.pIngredientsBlock = new IngredientsBlockElements();
		this.pIngredientsGroup = new IngredientsGroupElements();
		this.pIngredient = new IngredientElements();
		this.pQuantity = new QuantityElements();
		this.tMETRIC_UNIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.METRIC_UNIT");
		this.pToolsBlock = new ToolsBlockElements();
		this.pTool = new ToolElements();
		this.pStepsBlock = new StepsBlockElements();
		this.pConditionalStep = new ConditionalStepElements();
		this.pStep = new StepElements();
		this.pNAME = new NAMEElements();
		this.pTEXT = new TEXTElements();
		this.tTITLE_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.TITLE_LINE");
		this.tMAJ_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.MAJ_WORD");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.WORD");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.imt.dsl.jpcoffe.JPCoffe".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Main:
	//	imports+=Import*
	//	recipes+=Recipe+;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Import:
	//	"use" "recipe" NAME "in" STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Recipe:
	//	"Recipe" name=STRING '{'
	//	portion=PortionNB
	//	ingredients=IngredientsBlock
	//	tools=ToolsBlock
	//	steps=StepsBlock
	//	'}';
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}
	
	//PortionNB:
	//	"For" nb=INT "people"?;
	public PortionNBElements getPortionNBAccess() {
		return pPortionNB;
	}
	
	public ParserRule getPortionNBRule() {
		return getPortionNBAccess().getRule();
	}
	
	//IngredientsBlock:
	//	{IngredientsBlock} "Ingredients"
	//	TITLE_LINE
	//	ingredientsList+=(IngredientsGroup | Ingredient)*;
	public IngredientsBlockElements getIngredientsBlockAccess() {
		return pIngredientsBlock;
	}
	
	public ParserRule getIngredientsBlockRule() {
		return getIngredientsBlockAccess().getRule();
	}
	
	//IngredientsGroup:
	//	'*' "GROUP" name=STRING '['
	//	ingredientsList+=Ingredient*
	//	']'
	//	quantity=Quantity?;
	public IngredientsGroupElements getIngredientsGroupAccess() {
		return pIngredientsGroup;
	}
	
	public ParserRule getIngredientsGroupRule() {
		return getIngredientsGroupAccess().getRule();
	}
	
	//Ingredient:
	//	'*' (originalName+=NAME ("OR" originalName+=NAME)* "AS")?
	//	name=NAME
	//	quantity=Quantity?;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//Quantity:
	//	amount=INT unit=METRIC_UNIT?;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//terminal METRIC_UNIT:
	//	"gr" | "kg" | "cl" | "l" | "g";
	public TerminalRule getMETRIC_UNITRule() {
		return tMETRIC_UNIT;
	}
	
	//ToolsBlock:
	//	{ToolsBlock} "Tools"
	//	TITLE_LINE
	//	toolsList+=Tool*;
	public ToolsBlockElements getToolsBlockAccess() {
		return pToolsBlock;
	}
	
	public ParserRule getToolsBlockRule() {
		return getToolsBlockAccess().getRule();
	}
	
	//Tool:
	//	'*' (originalName=NAME "AS")? name=NAME;
	public ToolElements getToolAccess() {
		return pTool;
	}
	
	public ParserRule getToolRule() {
		return getToolAccess().getRule();
	}
	
	//StepsBlock:
	//	{StepsBlock} "Steps"
	//	TITLE_LINE
	//	stepsList+=(ConditionalStep | Step)*;
	public StepsBlockElements getStepsBlockAccess() {
		return pStepsBlock;
	}
	
	public ParserRule getStepsBlockRule() {
		return getStepsBlockAccess().getRule();
	}
	
	//ConditionalStep:
	//	"{" pred+=INT? ("," pred+=INT)* "}"
	//	"->" num=INT "."
	//	"IF" condition=TEXT
	//	"THEN" to=INT;
	public ConditionalStepElements getConditionalStepAccess() {
		return pConditionalStep;
	}
	
	public ParserRule getConditionalStepRule() {
		return getConditionalStepAccess().getRule();
	}
	
	//Step:
	//	"{" pred+=INT? ("," pred+=INT)* "}"
	//	"->" num=INT "."
	//	text=TEXT;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//NAME:
	//	MAJ_WORD WORD*;
	public NAMEElements getNAMEAccess() {
		return pNAME;
	}
	
	public ParserRule getNAMERule() {
		return getNAMEAccess().getRule();
	}
	
	//TEXT:
	//	(MAJ_WORD | WORD | INT)+;
	public TEXTElements getTEXTAccess() {
		return pTEXT;
	}
	
	public ParserRule getTEXTRule() {
		return getTEXTAccess().getRule();
	}
	
	//terminal TITLE_LINE:
	//	"-"+;
	public TerminalRule getTITLE_LINERule() {
		return tTITLE_LINE;
	}
	
	//terminal MAJ_WORD:
	//	'A'..'Z' ('a'..'z' | '-')*;
	public TerminalRule getMAJ_WORDRule() {
		return tMAJ_WORD;
	}
	
	//terminal WORD:
	//	'a'..'z' | 'A'..'Z' | '\'' | ',' | '-'+;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
