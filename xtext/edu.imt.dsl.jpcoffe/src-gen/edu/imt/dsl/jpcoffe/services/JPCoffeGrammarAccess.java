/*
 * generated by Xtext 2.15.0
 */
package edu.imt.dsl.jpcoffe.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JPCoffeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Main");
		private final Assignment cRecipesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRecipesRecipeParserRuleCall_0 = (RuleCall)cRecipesAssignment.eContents().get(0);
		
		//Main:
		//	recipes+=Recipe+;
		@Override public ParserRule getRule() { return rule; }
		
		//recipes+=Recipe+
		public Assignment getRecipesAssignment() { return cRecipesAssignment; }
		
		//Recipe
		public RuleCall getRecipesRecipeParserRuleCall_0() { return cRecipesRecipeParserRuleCall_0; }
	}
	public class RecipeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Recipe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecipeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPortionNBParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cIngredientsBlockParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cToolsBlockParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cStepsBlockParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Recipe:
		//	"Recipe" STRING "{"
		//	PortionNB
		//	IngredientsBlock
		//	ToolsBlock
		//	StepsBlock
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"Recipe" STRING "{" PortionNB IngredientsBlock ToolsBlock StepsBlock "}"
		public Group getGroup() { return cGroup; }
		
		//"Recipe"
		public Keyword getRecipeKeyword_0() { return cRecipeKeyword_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//PortionNB
		public RuleCall getPortionNBParserRuleCall_3() { return cPortionNBParserRuleCall_3; }
		
		//IngredientsBlock
		public RuleCall getIngredientsBlockParserRuleCall_4() { return cIngredientsBlockParserRuleCall_4; }
		
		//ToolsBlock
		public RuleCall getToolsBlockParserRuleCall_5() { return cToolsBlockParserRuleCall_5; }
		
		//StepsBlock
		public RuleCall getStepsBlockParserRuleCall_6() { return cStepsBlockParserRuleCall_6; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PortionNBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.PortionNB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbINTTerminalRuleCall_1_0 = (RuleCall)cNbAssignment_1.eContents().get(0);
		private final Keyword cPeopleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PortionNB:
		//	"For" nb=INT "people"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"For" nb=INT "people"?
		public Group getGroup() { return cGroup; }
		
		//"For"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//nb=INT
		public Assignment getNbAssignment_1() { return cNbAssignment_1; }
		
		//INT
		public RuleCall getNbINTTerminalRuleCall_1_0() { return cNbINTTerminalRuleCall_1_0; }
		
		//"people"?
		public Keyword getPeopleKeyword_2() { return cPeopleKeyword_2; }
	}
	public class IngredientsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.IngredientsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIngredientsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEW_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cIngredientParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEW_LINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//IngredientsBlock:
		//	"Ingredients" NEW_LINE
		//	TITLE_LINE NEW_LINE
		//	Ingredient*
		//	NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Ingredients" NEW_LINE TITLE_LINE NEW_LINE Ingredient* NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"Ingredients"
		public Keyword getIngredientsKeyword_0() { return cIngredientsKeyword_0; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_1() { return cNEW_LINETerminalRuleCall_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_3() { return cNEW_LINETerminalRuleCall_3; }
		
		//Ingredient*
		public RuleCall getIngredientParserRuleCall_4() { return cIngredientParserRuleCall_4; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_5() { return cNEW_LINETerminalRuleCall_5; }
	}
	public class IngredientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Ingredient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNAMETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cQuantityParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cNEW_LINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Ingredient:
		//	"*" SPACE NAME Quantity NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" SPACE NAME Quantity NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_2() { return cNAMETerminalRuleCall_2; }
		
		//Quantity
		public RuleCall getQuantityParserRuleCall_3() { return cQuantityParserRuleCall_3; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_4() { return cNEW_LINETerminalRuleCall_4; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMETRIC_UNITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Quantity:
		//	INT METRIC_UNIT?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT METRIC_UNIT?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//METRIC_UNIT?
		public RuleCall getMETRIC_UNITTerminalRuleCall_1() { return cMETRIC_UNITTerminalRuleCall_1; }
	}
	public class ToolsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.ToolsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToolsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEW_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cToolParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEW_LINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ToolsBlock:
		//	"Tools" NEW_LINE
		//	TITLE_LINE NEW_LINE
		//	Tool*
		//	NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Tools" NEW_LINE TITLE_LINE NEW_LINE Tool* NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"Tools"
		public Keyword getToolsKeyword_0() { return cToolsKeyword_0; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_1() { return cNEW_LINETerminalRuleCall_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_3() { return cNEW_LINETerminalRuleCall_3; }
		
		//Tool*
		public RuleCall getToolParserRuleCall_4() { return cToolParserRuleCall_4; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_5() { return cNEW_LINETerminalRuleCall_5; }
	}
	public class ToolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Tool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNAMETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEW_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Tool:
		//	"*" SPACE NAME NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" SPACE NAME NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_2() { return cNAMETerminalRuleCall_2; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_3() { return cNEW_LINETerminalRuleCall_3; }
	}
	public class StepsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.StepsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNEW_LINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTITLE_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNEW_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cStepParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEW_LINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//StepsBlock:
		//	"Steps" NEW_LINE
		//	TITLE_LINE NEW_LINE
		//	Step*
		//	NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"Steps" NEW_LINE TITLE_LINE NEW_LINE Step* NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"Steps"
		public Keyword getStepsKeyword_0() { return cStepsKeyword_0; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_1() { return cNEW_LINETerminalRuleCall_1; }
		
		//TITLE_LINE
		public RuleCall getTITLE_LINETerminalRuleCall_2() { return cTITLE_LINETerminalRuleCall_2; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_3() { return cNEW_LINETerminalRuleCall_3; }
		
		//Step*
		public RuleCall getStepParserRuleCall_4() { return cStepParserRuleCall_4; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_5() { return cNEW_LINETerminalRuleCall_5; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cSPACETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cTEXTTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cNEW_LINETerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//Step:
		//	"{" INT? ("," INT)* "}" SPACE
		//	"->" SPACE INT "." SPACE
		//	TEXT
		//	NEW_LINE;
		@Override public ParserRule getRule() { return rule; }
		
		//"{" INT? ("," INT)* "}" SPACE "->" SPACE INT "." SPACE TEXT NEW_LINE
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//("," INT)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7() { return cINTTerminalRuleCall_7; }
		
		//"."
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_9() { return cSPACETerminalRuleCall_9; }
		
		//TEXT
		public RuleCall getTEXTTerminalRuleCall_10() { return cTEXTTerminalRuleCall_10; }
		
		//NEW_LINE
		public RuleCall getNEW_LINETerminalRuleCall_11() { return cNEW_LINETerminalRuleCall_11; }
	}
	
	
	private final MainElements pMain;
	private final RecipeElements pRecipe;
	private final PortionNBElements pPortionNB;
	private final IngredientsBlockElements pIngredientsBlock;
	private final IngredientElements pIngredient;
	private final QuantityElements pQuantity;
	private final TerminalRule tMETRIC_UNIT;
	private final ToolsBlockElements pToolsBlock;
	private final ToolElements pTool;
	private final StepsBlockElements pStepsBlock;
	private final StepElements pStep;
	private final TerminalRule tTITLE_LINE;
	private final TerminalRule tNAME;
	private final TerminalRule tNEW_LINE;
	private final TerminalRule tSPACE;
	private final TerminalRule tTEXT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JPCoffeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pRecipe = new RecipeElements();
		this.pPortionNB = new PortionNBElements();
		this.pIngredientsBlock = new IngredientsBlockElements();
		this.pIngredient = new IngredientElements();
		this.pQuantity = new QuantityElements();
		this.tMETRIC_UNIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.METRIC_UNIT");
		this.pToolsBlock = new ToolsBlockElements();
		this.pTool = new ToolElements();
		this.pStepsBlock = new StepsBlockElements();
		this.pStep = new StepElements();
		this.tTITLE_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.TITLE_LINE");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.NAME");
		this.tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.NEW_LINE");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.SPACE");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.imt.dsl.jpcoffe.JPCoffe.TEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.imt.dsl.jpcoffe.JPCoffe".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Main:
	//	recipes+=Recipe+;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Recipe:
	//	"Recipe" STRING "{"
	//	PortionNB
	//	IngredientsBlock
	//	ToolsBlock
	//	StepsBlock
	//	"}";
	public RecipeElements getRecipeAccess() {
		return pRecipe;
	}
	
	public ParserRule getRecipeRule() {
		return getRecipeAccess().getRule();
	}
	
	//PortionNB:
	//	"For" nb=INT "people"?;
	public PortionNBElements getPortionNBAccess() {
		return pPortionNB;
	}
	
	public ParserRule getPortionNBRule() {
		return getPortionNBAccess().getRule();
	}
	
	//IngredientsBlock:
	//	"Ingredients" NEW_LINE
	//	TITLE_LINE NEW_LINE
	//	Ingredient*
	//	NEW_LINE;
	public IngredientsBlockElements getIngredientsBlockAccess() {
		return pIngredientsBlock;
	}
	
	public ParserRule getIngredientsBlockRule() {
		return getIngredientsBlockAccess().getRule();
	}
	
	//Ingredient:
	//	"*" SPACE NAME Quantity NEW_LINE;
	public IngredientElements getIngredientAccess() {
		return pIngredient;
	}
	
	public ParserRule getIngredientRule() {
		return getIngredientAccess().getRule();
	}
	
	//Quantity:
	//	INT METRIC_UNIT?;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//terminal METRIC_UNIT:
	//	"gr" | "kg" | "cl" | "l";
	public TerminalRule getMETRIC_UNITRule() {
		return tMETRIC_UNIT;
	}
	
	//ToolsBlock:
	//	"Tools" NEW_LINE
	//	TITLE_LINE NEW_LINE
	//	Tool*
	//	NEW_LINE;
	public ToolsBlockElements getToolsBlockAccess() {
		return pToolsBlock;
	}
	
	public ParserRule getToolsBlockRule() {
		return getToolsBlockAccess().getRule();
	}
	
	//Tool:
	//	"*" SPACE NAME NEW_LINE;
	public ToolElements getToolAccess() {
		return pTool;
	}
	
	public ParserRule getToolRule() {
		return getToolAccess().getRule();
	}
	
	//StepsBlock:
	//	"Steps" NEW_LINE
	//	TITLE_LINE NEW_LINE
	//	Step*
	//	NEW_LINE;
	public StepsBlockElements getStepsBlockAccess() {
		return pStepsBlock;
	}
	
	public ParserRule getStepsBlockRule() {
		return getStepsBlockAccess().getRule();
	}
	
	//Step:
	//	"{" INT? ("," INT)* "}" SPACE
	//	"->" SPACE INT "." SPACE
	//	TEXT
	//	NEW_LINE;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//terminal TITLE_LINE:
	//	"-"+;
	public TerminalRule getTITLE_LINERule() {
		return tTITLE_LINE;
	}
	
	//terminal NAME:
	//	'A'..'Z' ('a'..'z' | 'A'..'Z' | SPACE)*;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal NEW_LINE:
	//	"\n" | "\r\n";
	public TerminalRule getNEW_LINERule() {
		return tNEW_LINE;
	}
	
	//terminal SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal TEXT:
	//	'a'..'z' | 'A'..'Z'+;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
