/*
 * generated by Xtext 2.15.0
 */
grammar InternalJPCoffe;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.imt.dsl.jpcoffe.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.imt.dsl.jpcoffe.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.imt.dsl.jpcoffe.services.JPCoffeGrammarAccess;

}
@parser::members {
	private JPCoffeGrammarAccess grammarAccess;

	public void setGrammarAccess(JPCoffeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getRecipeParserRuleCall()); }
		ruleRecipe
		{ after(grammarAccess.getMainAccess().getRecipeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecipe
entryRuleRecipe
:
{ before(grammarAccess.getRecipeRule()); }
	 ruleRecipe
{ after(grammarAccess.getRecipeRule()); } 
	 EOF 
;

// Rule Recipe
ruleRecipe 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecipeAccess().getGroup()); }
		(rule__Recipe__Group__0)
		{ after(grammarAccess.getRecipeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePortionNB
entryRulePortionNB
:
{ before(grammarAccess.getPortionNBRule()); }
	 rulePortionNB
{ after(grammarAccess.getPortionNBRule()); } 
	 EOF 
;

// Rule PortionNB
rulePortionNB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPortionNBAccess().getGroup()); }
		(rule__PortionNB__Group__0)
		{ after(grammarAccess.getPortionNBAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIngredientsBlock
entryRuleIngredientsBlock
:
{ before(grammarAccess.getIngredientsBlockRule()); }
	 ruleIngredientsBlock
{ after(grammarAccess.getIngredientsBlockRule()); } 
	 EOF 
;

// Rule IngredientsBlock
ruleIngredientsBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIngredientsBlockAccess().getGroup()); }
		(rule__IngredientsBlock__Group__0)
		{ after(grammarAccess.getIngredientsBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIngredient
entryRuleIngredient
:
{ before(grammarAccess.getIngredientRule()); }
	 ruleIngredient
{ after(grammarAccess.getIngredientRule()); } 
	 EOF 
;

// Rule Ingredient
ruleIngredient 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIngredientAccess().getGroup()); }
		(rule__Ingredient__Group__0)
		{ after(grammarAccess.getIngredientAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantity
entryRuleQuantity
:
{ before(grammarAccess.getQuantityRule()); }
	 ruleQuantity
{ after(grammarAccess.getQuantityRule()); } 
	 EOF 
;

// Rule Quantity
ruleQuantity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantityAccess().getGroup()); }
		(rule__Quantity__Group__0)
		{ after(grammarAccess.getQuantityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleToolsBlock
entryRuleToolsBlock
:
{ before(grammarAccess.getToolsBlockRule()); }
	 ruleToolsBlock
{ after(grammarAccess.getToolsBlockRule()); } 
	 EOF 
;

// Rule ToolsBlock
ruleToolsBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getToolsBlockAccess().getGroup()); }
		(rule__ToolsBlock__Group__0)
		{ after(grammarAccess.getToolsBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTool
entryRuleTool
:
{ before(grammarAccess.getToolRule()); }
	 ruleTool
{ after(grammarAccess.getToolRule()); } 
	 EOF 
;

// Rule Tool
ruleTool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getToolAccess().getGroup()); }
		(rule__Tool__Group__0)
		{ after(grammarAccess.getToolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepsBlock
entryRuleStepsBlock
:
{ before(grammarAccess.getStepsBlockRule()); }
	 ruleStepsBlock
{ after(grammarAccess.getStepsBlockRule()); } 
	 EOF 
;

// Rule StepsBlock
ruleStepsBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepsBlockAccess().getGroup()); }
		(rule__StepsBlock__Group__0)
		{ after(grammarAccess.getStepsBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStep
entryRuleStep
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepAccess().getGroup()); }
		(rule__Step__Group__0)
		{ after(grammarAccess.getStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNAME
entryRuleNAME
:
{ before(grammarAccess.getNAMERule()); }
	 ruleNAME
{ after(grammarAccess.getNAMERule()); } 
	 EOF 
;

// Rule NAME
ruleNAME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNAMEAccess().getGroup()); }
		(rule__NAME__Group__0)
		{ after(grammarAccess.getNAMEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTEXT
entryRuleTEXT
:
{ before(grammarAccess.getTEXTRule()); }
	 ruleTEXT
{ after(grammarAccess.getTEXTRule()); } 
	 EOF 
;

// Rule TEXT
ruleTEXT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTEXTAccess().getAlternatives()); }
			(rule__TEXT__Alternatives)
			{ after(grammarAccess.getTEXTAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getTEXTAccess().getAlternatives()); }
			(rule__TEXT__Alternatives)*
			{ after(grammarAccess.getTEXTAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TEXT__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTEXTAccess().getMAJ_WORDTerminalRuleCall_0()); }
		RULE_MAJ_WORD
		{ after(grammarAccess.getTEXTAccess().getMAJ_WORDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTEXTAccess().getWORDTerminalRuleCall_1()); }
		RULE_WORD
		{ after(grammarAccess.getTEXTAccess().getWORDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__0__Impl
	rule__Recipe__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getRecipeKeyword_0()); }
	'Recipe'
	{ after(grammarAccess.getRecipeAccess().getRecipeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__1__Impl
	rule__Recipe__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getNameAssignment_1()); }
	(rule__Recipe__NameAssignment_1)
	{ after(grammarAccess.getRecipeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__2__Impl
	rule__Recipe__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRecipeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__3__Impl
	rule__Recipe__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getPortionAssignment_3()); }
	(rule__Recipe__PortionAssignment_3)
	{ after(grammarAccess.getRecipeAccess().getPortionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__4__Impl
	rule__Recipe__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getIngredientsAssignment_4()); }
	(rule__Recipe__IngredientsAssignment_4)
	{ after(grammarAccess.getRecipeAccess().getIngredientsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__5__Impl
	rule__Recipe__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getToolsAssignment_5()); }
	(rule__Recipe__ToolsAssignment_5)
	{ after(grammarAccess.getRecipeAccess().getToolsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__6__Impl
	rule__Recipe__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getStepsAssignment_6()); }
	(rule__Recipe__StepsAssignment_6)
	{ after(grammarAccess.getRecipeAccess().getStepsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Recipe__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getRecipeAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PortionNB__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PortionNB__Group__0__Impl
	rule__PortionNB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPortionNBAccess().getForKeyword_0()); }
	'For'
	{ after(grammarAccess.getPortionNBAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PortionNB__Group__1__Impl
	rule__PortionNB__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPortionNBAccess().getNbAssignment_1()); }
	(rule__PortionNB__NbAssignment_1)
	{ after(grammarAccess.getPortionNBAccess().getNbAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PortionNB__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPortionNBAccess().getPeopleKeyword_2()); }
	('people')?
	{ after(grammarAccess.getPortionNBAccess().getPeopleKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IngredientsBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IngredientsBlock__Group__0__Impl
	rule__IngredientsBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientsBlockAccess().getIngredientsBlockAction_0()); }
	()
	{ after(grammarAccess.getIngredientsBlockAccess().getIngredientsBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IngredientsBlock__Group__1__Impl
	rule__IngredientsBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientsBlockAccess().getIngredientsKeyword_1()); }
	'Ingredients'
	{ after(grammarAccess.getIngredientsBlockAccess().getIngredientsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IngredientsBlock__Group__2__Impl
	rule__IngredientsBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
	RULE_TITLE_LINE
	{ after(grammarAccess.getIngredientsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IngredientsBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientsBlockAccess().getIngredientsListAssignment_3()); }
	(rule__IngredientsBlock__IngredientsListAssignment_3)*
	{ after(grammarAccess.getIngredientsBlockAccess().getIngredientsListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ingredient__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ingredient__Group__0__Impl
	rule__Ingredient__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientAccess().getAsteriskKeyword_0()); }
	'*'
	{ after(grammarAccess.getIngredientAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ingredient__Group__1__Impl
	rule__Ingredient__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientAccess().getNameAssignment_1()); }
	(rule__Ingredient__NameAssignment_1)
	{ after(grammarAccess.getIngredientAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ingredient__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIngredientAccess().getQuantityAssignment_2()); }
	(rule__Ingredient__QuantityAssignment_2)?
	{ after(grammarAccess.getIngredientAccess().getQuantityAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quantity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__0__Impl
	rule__Quantity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getAmountAssignment_0()); }
	(rule__Quantity__AmountAssignment_0)
	{ after(grammarAccess.getQuantityAccess().getAmountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getUnitAssignment_1()); }
	(rule__Quantity__UnitAssignment_1)?
	{ after(grammarAccess.getQuantityAccess().getUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ToolsBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ToolsBlock__Group__0__Impl
	rule__ToolsBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolsBlockAccess().getToolsBlockAction_0()); }
	()
	{ after(grammarAccess.getToolsBlockAccess().getToolsBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ToolsBlock__Group__1__Impl
	rule__ToolsBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolsBlockAccess().getToolsKeyword_1()); }
	'Tools'
	{ after(grammarAccess.getToolsBlockAccess().getToolsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ToolsBlock__Group__2__Impl
	rule__ToolsBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
	RULE_TITLE_LINE
	{ after(grammarAccess.getToolsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ToolsBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolsBlockAccess().getToolsListAssignment_3()); }
	(rule__ToolsBlock__ToolsListAssignment_3)*
	{ after(grammarAccess.getToolsBlockAccess().getToolsListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tool__Group__0__Impl
	rule__Tool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolAccess().getAsteriskKeyword_0()); }
	'*'
	{ after(grammarAccess.getToolAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getToolAccess().getNameAssignment_1()); }
	(rule__Tool__NameAssignment_1)
	{ after(grammarAccess.getToolAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepsBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepsBlock__Group__0__Impl
	rule__StepsBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepsBlockAccess().getStepsBlockAction_0()); }
	()
	{ after(grammarAccess.getStepsBlockAccess().getStepsBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepsBlock__Group__1__Impl
	rule__StepsBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepsBlockAccess().getStepsKeyword_1()); }
	'Steps'
	{ after(grammarAccess.getStepsBlockAccess().getStepsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepsBlock__Group__2__Impl
	rule__StepsBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
	RULE_TITLE_LINE
	{ after(grammarAccess.getStepsBlockAccess().getTITLE_LINETerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepsBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepsBlockAccess().getStepsListAssignment_3()); }
	(rule__StepsBlock__StepsListAssignment_3)*
	{ after(grammarAccess.getStepsBlockAccess().getStepsListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__1__Impl
	rule__Step__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getPredAssignment_1()); }
	(rule__Step__PredAssignment_1)?
	{ after(grammarAccess.getStepAccess().getPredAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__2__Impl
	rule__Step__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getGroup_2()); }
	(rule__Step__Group_2__0)*
	{ after(grammarAccess.getStepAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__3__Impl
	rule__Step__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStepAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__4__Impl
	rule__Step__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
	'->'
	{ after(grammarAccess.getStepAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__5__Impl
	rule__Step__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getNumAssignment_5()); }
	(rule__Step__NumAssignment_5)
	{ after(grammarAccess.getStepAccess().getNumAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__6__Impl
	rule__Step__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getFullStopKeyword_6()); }
	'.'
	{ after(grammarAccess.getStepAccess().getFullStopKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getTextAssignment_7()); }
	(rule__Step__TextAssignment_7)
	{ after(grammarAccess.getStepAccess().getTextAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group_2__0__Impl
	rule__Step__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getStepAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getPredAssignment_2_1()); }
	(rule__Step__PredAssignment_2_1)
	{ after(grammarAccess.getStepAccess().getPredAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NAME__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NAME__Group__0__Impl
	rule__NAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NAME__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAMEAccess().getMAJ_WORDTerminalRuleCall_0()); }
	RULE_MAJ_WORD
	{ after(grammarAccess.getNAMEAccess().getMAJ_WORDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NAME__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NAME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NAME__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAMEAccess().getWORDTerminalRuleCall_1()); }
	(RULE_WORD)*
	{ after(grammarAccess.getNAMEAccess().getWORDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Recipe__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecipeAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRecipeAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__PortionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecipeAccess().getPortionPortionNBParserRuleCall_3_0()); }
		rulePortionNB
		{ after(grammarAccess.getRecipeAccess().getPortionPortionNBParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__IngredientsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecipeAccess().getIngredientsIngredientsBlockParserRuleCall_4_0()); }
		ruleIngredientsBlock
		{ after(grammarAccess.getRecipeAccess().getIngredientsIngredientsBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__ToolsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecipeAccess().getToolsToolsBlockParserRuleCall_5_0()); }
		ruleToolsBlock
		{ after(grammarAccess.getRecipeAccess().getToolsToolsBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Recipe__StepsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecipeAccess().getStepsStepsBlockParserRuleCall_6_0()); }
		ruleStepsBlock
		{ after(grammarAccess.getRecipeAccess().getStepsStepsBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PortionNB__NbAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPortionNBAccess().getNbINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPortionNBAccess().getNbINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IngredientsBlock__IngredientsListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIngredientsBlockAccess().getIngredientsListIngredientParserRuleCall_3_0()); }
		ruleIngredient
		{ after(grammarAccess.getIngredientsBlockAccess().getIngredientsListIngredientParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIngredientAccess().getNameNAMEParserRuleCall_1_0()); }
		ruleNAME
		{ after(grammarAccess.getIngredientAccess().getNameNAMEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ingredient__QuantityAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIngredientAccess().getQuantityQuantityParserRuleCall_2_0()); }
		ruleQuantity
		{ after(grammarAccess.getIngredientAccess().getQuantityQuantityParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__AmountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getAmountINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getQuantityAccess().getAmountINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__UnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getUnitMETRIC_UNITTerminalRuleCall_1_0()); }
		RULE_METRIC_UNIT
		{ after(grammarAccess.getQuantityAccess().getUnitMETRIC_UNITTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ToolsBlock__ToolsListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getToolsBlockAccess().getToolsListToolParserRuleCall_3_0()); }
		ruleTool
		{ after(grammarAccess.getToolsBlockAccess().getToolsListToolParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tool__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getToolAccess().getNameNAMEParserRuleCall_1_0()); }
		ruleNAME
		{ after(grammarAccess.getToolAccess().getNameNAMEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepsBlock__StepsListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepsBlockAccess().getStepsListStepParserRuleCall_3_0()); }
		ruleStep
		{ after(grammarAccess.getStepsBlockAccess().getStepsListStepParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__PredAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getPredINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStepAccess().getPredINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__PredAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getPredINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStepAccess().getPredINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__NumAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getNumINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getStepAccess().getNumINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__TextAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getTextTEXTParserRuleCall_7_0()); }
		ruleTEXT
		{ after(grammarAccess.getStepAccess().getTextTEXTParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_METRIC_UNIT : ('gr'|'kg'|'cl'|'l');

RULE_TITLE_LINE : '-'+;

RULE_MAJ_WORD : 'A'..'Z' ('a'..'z')*;

RULE_WORD : ('a'..'z'|'A'..'Z'|'\''|',')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
